# Connecting to the Confluence instance nodes

## Enterprise Node 1
ssh-add /Users/darryl/.ec2/brikit-internal.pem
export BASTION_IP=54.200.234.92
export SSH_OPTS='-o ServerAliveInterval=60 -o ServerAliveCountMax=30'
export NODE_IP=10.0.53.111
ssh ${SSH_OPTS} -o "proxycommand ssh -W %h:%p ${SSH_OPTS} ec2-user@${BASTION_IP}" ec2-user@${NODE_IP}

## Enterprise Node 2
ssh-add /Users/darryl/.ec2/brikit-internal.pem
export BASTION_IP=54.200.234.92
export SSH_OPTS='-o ServerAliveInterval=60 -o ServerAliveCountMax=30'
export NODE_IP=10.0.30.250
ssh ${SSH_OPTS} -o "proxycommand ssh -W %h:%p ${SSH_OPTS} ec2-user@${BASTION_IP}" ec2-user@${NODE_IP}

## Enterprise Node 3
ssh-add /Users/darryl/.ec2/brikit-internal.pem
export BASTION_IP=54.200.234.92
export SSH_OPTS='-o ServerAliveInterval=60 -o ServerAliveCountMax=30'
export NODE_IP=10.0.2.98
ssh ${SSH_OPTS} -o "proxycommand ssh -W %h:%p ${SSH_OPTS} ec2-user@${BASTION_IP}" ec2-user@${NODE_IP}

## Enterprise Node 4
ssh-add /Users/darryl/.ec2/brikit-internal.pem
export BASTION_IP=54.200.234.92
export SSH_OPTS='-o ServerAliveInterval=60 -o ServerAliveCountMax=30'
export NODE_IP=10.0.50.167
ssh ${SSH_OPTS} -o "proxycommand ssh -W %h:%p ${SSH_OPTS} ec2-user@${BASTION_IP}" ec2-user@${NODE_IP}

## Development Instance
ssh-add /Users/darryl/.ec2/brikit-internal.pem
export BASTION_IP=54.200.234.92
export NODE_IP=10.0.33.240
export SSH_OPTS='-o ServerAliveInterval=60 -o ServerAliveCountMax=30'
ssh ${SSH_OPTS} -o "proxycommand ssh -W %h:%p ${SSH_OPTS} ec2-user@${BASTION_IP}" ec2-user@${NODE_IP}

## Starting Confluence on a new node

This shouldn't be necessary; just wait until Confluence starts on new nodes (ps -edalf | grep confluence), which takes several steps while the infrastructure-building scripts are run.

sudo su confluence -c "/opt/atlassian/confluence/current/bin/startup.sh"

# Data Center Annual Review (2020 done Jan-Feb 2021) (Allow two weeks)
- Complete questionnaires on ticket for each product
- Review requirements
	- https://developer.atlassian.com/platform/marketplace/dc-apps-performance-and-scale-testing/
	- https://developer.atlassian.com/platform/marketplace/dc-apps-performance-toolkit-user-guide-confluence/
- Review the Deployment Guide
	- https://s3.amazonaws.com/aws-quickstart/quickstart-atlassian-confluence/doc/confluence-data-center-on-the-aws-cloud.pdf 
- Set up development test environment on Amazon AWS
- Set up performance test environment on Amazon AWS
- Run performance tests for
	- Theme Press
	- Targeted Search
	- Blueprint Maker
	- Content Flow
	- Calendar Integration
- Run scalability tests for
	- Theme Press
	- Targeted Search
	- Blueprint Maker
	- Content Flow
	- Calendar Integration
	
# Questionnaire:

See tickets for previous answers, but for:

Forged requests -- Does your app block forged requests? Answer: Yes.
This explanation was requested and accepted after answering No, so answer yes to save the extra loop:
"Targeted Search does not add any endpoints beyond the standard actions, macros, and admin modules defined by Confluence’s plugin infrastructure, which benefits from Confluence's mechanisms to block forged requests, so we don’t do anything explicit in this regard.
"For confirming the security of our apps, we partner with one of our largest product and services clients (which runs a 150,000 user Confluence installation). For each product version upgrade, their security and penetration test team puts our products through a several week exercise (after their functional test team does a similar exercise), and in response to which we resolve any issues they find. Since they have a dedicated team the size of our company, we are quite confident that our apps stand up to current security standards."

# Performance and scale testing:

## Testing code

https://github.com/brikit/dc-app-performance-toolkit -- Note: this is a PUBLIC fork of the dc-app-performance-toolkit (https://github.com/atlassian/dc-app-performance-toolkit), and you can inspect the other 126 forks for clues on how to tweak tests in the future.

The above git repo has five branches (blueprint-maker, calendar-integrations, content-flow, targeted-search, and theme-press) to test each product. Review the commit history to see the changes made.

Note the app/confluence.yml file controls which DC environment to hit (hostname) and the parameters for the test (load: dev or enterprise, plus custom query to find pages using the product, and ratio of which actions to take). Custom tests are provided by selenium and jmeter; Blueprint Maker is the only one exposing REST API endpoints so it has both, the others have only selenium tests. 

See app/extension/confluence/extension_ui.py for app-specific selenium tests.

app/selenium_ui/confluence_ui.py had generic changes to enable the app-specific tests (per instructions).

Run the jmeter tool to tune the jmeter tests. The configuration is stored in the app/jmeter/confluence.jmx file. Instructions are in the DC toolkit user guide. (https://developer.atlassian.com/platform/marketplace/dc-apps-performance-toolkit-user-guide-confluence)

Ignore any changes in the commit history on locust files: locust doesn't work (can't generate unique strings for each call) so we ended up using jmeter instead.

Also, running the scripts to crunch the results required changing the calls from "pip" and "python" to "pip3" and "python3". Also, "sudo" is required to run most of the commands, but not always (for instance, the "docker run" command didn't need sudo).

## Starting the Enterprise Scale Cluster

Carefully follow the instructions in the DC toolkit user guide (https://developer.atlassian.com/platform/marketplace/dc-apps-performance-toolkit-user-guide-confluence).

There is no reason to set up the cluster with SSL, so just keep things simple with plain http: connection.

SSH key pair name: brikit-internal

It's okay to add the app-specific pages described below AFTER running the bulk data and attachments loading and waiting for the indexer to complete, but BEFORE creating the index snapshot. (No space imports are required, so reindexing for the new content won't be required.) 

Blueprint Maker notes:

https://data-center-ecosystem.atlassian.net/servicedesk/customer/portal/3/DCHELP-1171

Create a simple blueprint for use by the REST API. Current test assumes the "Employe Page" page blueprint using a single field "employee-name". It will place created pages in space key "TEST" under the page "Blueprint Maker Output" (so create that space and page).

Create five pages with page titles starting with BlueprintMakerTest in space TEST, and place one blueprint maker macro on each (Create Page From Blueprint and Live Blueprint). Create simple blueprints to support those macros.

Create five blogposts with page titles starting with BlueprintMakerTest in space TEST, and place one Create Page From Blueprint macro on each.

Calendar Integrations notes:

https://data-center-ecosystem.atlassian.net/servicedesk/customer/portal/3/DCHELP-1192

Create five pages with page titles starting with CalendarIntegrationsTest in space TEST, and place one calendar macro on each (List or monthly). Connect to Andy's test calendar to support those macros.

Create five blogposts with page titles starting with CalendarIntegrationsTest in space TEST, and place one list calendar macro on each.

Content Flow notes:

https://data-center-ecosystem.atlassian.net/servicedesk/customer/portal/3/DCHELP-1191

Create five pages with page titles starting with ContentFlowTest in space TEST. No pages need to be created to support the test, but note that the BlueprintMakerTest pages and blogposts are needed (the test framework requires a custom query, so we just use the blueprint maker pages).

Targeted Search notes:

https://data-center-ecosystem.atlassian.net/servicedesk/customer/portal/3/DCHELP-567

Create five pages with page titles starting with TargetedSearchTest in space TEST, and place one Targeted Search macro on each (Search Field, Search Link, Content Query, Interactive Search, Label Select). Define a very small taxonomy (one group with three filters) to support the macros. Using very large taxonomies appears to throw off the test framework timing, causing the login page tests to fail dramatically.

Create five blogposts with page titles starting with TargetedSearchTest in space TEST, and place one Search Link macro on each.

Theme Press notes:

https://data-center-ecosystem.atlassian.net/servicedesk/customer/portal/3/DCHELP-565

Grant all space permissions to confluence-users group for all Theme-Press-installed spaces (Splash, Vanilla, Theme Press Default).
Copy Splash theme to DCsplash and make the Confluence header show to anyone by default for everyone (so that the Confluence widgets are always available).
Set the Splash space to use DCsplash theme.
Copy Vanilla theme to DCvanilla and make the Confluence header show to anyone by default for everyone (so that the Confluence widgets are always available).
Set the Vanilla space to use DCvanilla theme.
Set the site default theme to DCvanilla.
Delete the original Splash and Vanilla themes.
Set the site theme to Theme Press.
For ALL layout pages, in the Theme Press Designer's Layout tab > Page Elements, change the settings to:
Breadcrumbs: With Title
Metadata Banner: With Breadcrumbs
Page Title: Own Layer
Page Info: With Title
Likes and Labels: Own Layer
Comments: Own Layer
Page Toolbar: Toggle
Navigator: Show Collapsed
Defer Loading Labels: NOT checked
Re-title the five Initiative pages in the Vanilla space to start with ThemePressTest (these pages must have layer, column, and block macros)
Re-title all  blogposts in the Vanilla and Splash spaces to start with ThemePressTest, and set the block padding to 30px to force these blogposts to have layer, column, and block macros
